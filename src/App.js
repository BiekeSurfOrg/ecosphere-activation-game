import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Camera, Gift, Coins, RotateCcw, CheckCircle, Circle, X, MapPin, Info, Trophy } from 'lucide-react';
import { BrowserRouter as Router, useSearchParams, useNavigate } from 'react-router-dom';
import { v4 as uuidv4, validate as uuidValidate } from 'uuid';

// Utils
const getUserUUID = () => {
¬† let uuid = localStorage.getItem('user_uuid');
¬† if (!uuid) {
¬† ¬† uuid = 'user-' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
¬† ¬† localStorage.setItem('user_uuid', uuid);
¬† }
¬† return uuid;
};

// API Configuration
const API_BASE_URL = 'https://kate-voice-backend-2ad12d55f690.herokuapp.com/';

// API calls
const api = {
¬† async scanQR(userUuid, qrData) {
¬† ¬† try {
¬† ¬† ¬† const response = await fetch(`${API_BASE_URL}/scan`, {
¬† ¬† ¬† ¬† method: 'POST',
¬† ¬† ¬† ¬† headers: { 'Content-Type': 'application/json' },
¬† ¬† ¬† ¬† body: JSON.stringify({ userUuid, qrData }),
¬† ¬† ¬† });
¬† ¬† ¬† return await response.json();
¬† ¬† } catch (error) {
¬† ¬† ¬† console.error('API Error:', error);
¬† ¬† ¬† throw error;
¬† ¬† }
¬† },
¬† async getUserProgress(userUuid) {
¬† ¬† try {
¬† ¬† ¬† const response = await fetch(`${API_BASE_URL}/user/${userUuid}/progress`);
¬† ¬† ¬† return await response.json();
¬† ¬† } catch (error) {
¬† ¬† ¬† console.error('API Error:', error);
¬† ¬† ¬† throw error;
¬† ¬† }
¬† },
¬† async claimReward(userUuid, choice) {
¬† ¬† try {
¬† ¬† ¬† const response = await fetch(`${API_BASE_URL}/reward`, {
¬† ¬† ¬† ¬† method: 'POST',
¬† ¬† ¬† ¬† headers: { 'Content-Type': 'application/json' },
¬† ¬† ¬† ¬† body: JSON.stringify({ userUuid, rewardType: choice, timestamp: new Date().toISOString() }),
¬† ¬† ¬† });
¬† ¬† ¬† return await response.json();
¬† ¬† } catch (error) {
¬† ¬† ¬† console.error('API Error:', error);
¬† ¬† ¬† throw error;
¬† ¬† }
¬† }
};

// --- –ù–û–í –ö–û–ú–ü–û–ù–ï–ù–¢ ---
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ—Ç–æ
const ScanResultPage = ({ result, onContinue }) => {
    const { success, message, additionalInfo } = result;

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg shadow-xl p-8 max-w-md w-full text-center">
                {success ? (
                    <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                ) : (
                    <X className="w-16 h-16 text-red-500 mx-auto mb-4" />
                )}
                
                <h2 className="text-2xl font-bold text-gray-800 mb-3">{message}</h2>
                
                {/* –¢—É–∫ –º–æ–∂–µ—Ç–µ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {additionalInfo && (
                    <div className="text-left bg-gray-50 border border-gray-200 p-4 rounded-lg my-6">
                        <p className="text-gray-700">{additionalInfo}</p>
                    </div>
                )}
                
                <button
                    onClick={onContinue}
                    className="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-colors"
                >
                    –í–∏–∂ –º–æ—è –ø—Ä–æ–≥—Ä–µ—Å
                </button>
            </div>
        </div>
    );
};


// --- –°–¢–ê–† –ö–û–ú–ü–û–ù–ï–ù–¢ (–Ω–µ–ø—Ä–æ–º–µ–Ω–µ–Ω) ---
// Progress Tracker Component
const ProgressTracker = ({ scannedLocations = [], totalCoins }) => {
    const locations = [1, 2, 3];
    return (
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4 text-center">–ü—Ä–æ–≥—Ä–µ—Å –Ω–∞ –∏–≥—Ä–∞—Ç–∞</h2>
            <div className="bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-lg p-4 mb-6">
                <div className="flex items-center justify-center space-x-3">
                    <Coins className="w-8 h-8 text-white" />
                    <span className="text-2xl font-bold text-white">{totalCoins} –∫—Ä–µ–¥–∏—Ç–∞</span>
                </div>
            </div>
            <div className="flex justify-center items-center space-x-8 mb-4">
                {locations.map(locationId => {
                    const isScanned = scannedLocations.some(loc => loc.locationId === locationId);
                    return (
                        <div key={locationId} className="flex flex-col items-center">
                            {isScanned ? (
                                <CheckCircle className="w-16 h-16 text-green-500 mb-2" />
                            ) : (
                                <Circle className="w-16 h-16 text-gray-300 mb-2" />
                            )}
                            <span className={`text-sm font-medium ${isScanned ? 'text-green-600' : 'text-gray-400'}`}>
                                QR {locationId}
                            </span>
                        </div>
                    );
                })}
            </div>
            <div className="text-center">
                <span className="text-lg font-semibold text-gray-700">
                    {scannedLocations.length}/3 QR –∫–æ–¥–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–∏
                </span>
            </div>
            <div className="mt-4">
                <div className="w-full bg-gray-200 rounded-full h-3">
                    <div
                        className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-500 ease-out"
                        style={{ width: `${(scannedLocations.length / 3) * 100}%` }}
                    ></div>
                </div>
            </div>
        </div>
    );
};

// --- –°–¢–ê–† –ö–û–ú–ü–û–ù–ï–ù–¢ (–Ω–µ–ø—Ä–æ–º–µ–Ω–µ–Ω) ---
const RewardModal = ({ isOpen, onClose, onChoose }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg p-8 max-w-md w-full text-center">
                <div className="mb-6">
                    <Trophy className="w-16 h-16 text-yellow-500 mx-auto mb-4" />
                    <h2 className="text-2xl font-bold text-gray-800 mb-2">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!</h2>
                    <p className="text-gray-600">–°–∫–∞–Ω–∏—Ä–∞—Ö—Ç–µ –≤—Å–∏—á–∫–∏ QR –∫–æ–¥–æ–≤–µ! –í—Ä–µ–º–µ –µ –∑–∞ —Ñ–∏–Ω–∞–ª–Ω–∞—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞!</p>
                </div>
                <div className="space-y-4">
                    <p className="text-lg font-semibold text-gray-700 mb-4">–ò–∑–±–µ—Ä–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥–∞—Ç–∞ —Å–∏:</p>
                    <button
                        onClick={() => onChoose('coins')}
                        className="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-4 rounded-lg inline-flex items-center justify-center space-x-2 transition-colors"
                    >
                        <Coins className="w-5 h-5" />
                        <span>+50 –∫—Ä–µ–¥–∏—Ç–∞ –≤–µ–¥–Ω–∞–≥–∞</span>
                    </button>
                    <button
                        onClick={() => onChoose('wheel')}
                        className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-lg inline-flex items-center justify-center space-x-2 transition-colors"
                    >
                        <RotateCcw className="w-5 h-5" />
                        <span>–ö–æ–ª–µ–ª–æ –Ω–∞ –∫—ä—Å–º–µ—Ç–∞ (5 –∑–∞–≤—ä—Ä—Ç–∞–Ω–∏—è)</span>
                    </button>
                </div>
            </div>
        </div>
    );
};

// --- –°–¢–ê–† –ö–û–ú–ü–û–ù–ï–ù–¢ (–Ω–µ–ø—Ä–æ–º–µ–Ω–µ–Ω) ---
const WheelSpinner = ({ spins, onSpin }) => {
    // ... (–±–µ–∑ –ø—Ä–æ–º–µ–Ω–∏ —Ç—É–∫)
    const [isSpinning, setIsSpinning] = useState(false);
    const [lastResult, setLastResult] = useState(null);

    const spin = async () => {
        if (spins <= 0 || isSpinning) return;
        setIsSpinning(true);
        setTimeout(() => {
            const results = [10, 20, 30, 50, 100, 5];
            const result = results[Math.floor(Math.random() * results.length)];
            setLastResult(result);
            setIsSpinning(false);
            onSpin(result);
        }, 2000);
    };

    if (spins <= 0) return null;

    return (
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4 text-center">üé∞ –ö–æ–ª–µ–ª–æ –Ω–∞ –∫—ä—Å–º–µ—Ç–∞</h2>
            <div className="text-center">
                <div className="mb-4">
                    <div className={`w-32 h-32 mx-auto border-8 border-purple-500 rounded-full flex items-center justify-center ${isSpinning ? 'animate-spin' : ''} bg-gradient-to-br from-purple-100 to-purple-200`}>
                        <RotateCcw className={`w-16 h-16 text-purple-600 ${isSpinning ? 'animate-pulse' : ''}`} />
                    </div>
                </div>
                <p className="text-lg font-semibold text-gray-700 mb-4">
                    –û—Å—Ç–∞–≤–∞—Ç –≤–∏ {spins} –∑–∞–≤—ä—Ä—Ç–∞–Ω–∏—è
                </p>
                {lastResult !== null && (
                    <div className="mb-4 p-3 bg-green-100 border border-green-300 rounded-lg">
                        <p className="text-green-700 font-semibold">
                            üéâ –°–ø–µ—á–µ–ª–∏—Ö—Ç–µ {lastResult} –∫—Ä–µ–¥–∏—Ç–∞!
                        </p>
                    </div>
                )}
                <button
                    onClick={spin}
                    disabled={isSpinning || spins <= 0}
                    className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white font-bold py-3 px-6 rounded-lg transition-colors"
                >
                    {isSpinning ? '–ó–∞–≤—ä—Ä—Ç–∞ —Å–µ...' : 'üé≤ –ó–∞–≤—ä—Ä—Ç–∏ –∫–æ–ª–µ–ª–æ—Ç–æ'}
                </button>
            </div>
        </div>
    );
};


// --- –û–°–ù–û–í–ï–ù –ö–û–ú–ü–û–ù–ï–ù–¢ (–° –ü–†–û–ú–ï–ù–ò) ---
const App = () => {
    const [userUuid] = useState(() => getUserUUID());
    const [scannedLocations, setScannedLocations] = useState([]);
    const [totalCoins, setTotalCoins] = useState(0);
    const [wheelSpins, setWheelSpins] = useState(0);
    const [showRewardModal, setShowRewardModal] = useState(false);
    const [loading, setLoading] = useState(true);
    
    // --- –ù–û–í–û –°–™–°–¢–û–Ø–ù–ò–ï ---
    // –î—ä—Ä–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ—Ç–æ, –∑–∞ –¥–∞ –ø–æ–∫–∞–∂–µ –Ω–æ–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const [scanResultView, setScanResultView] = useState(null);

    const [searchParams, setSearchParams] = useSearchParams();
    const locationIdFromUrl = searchParams.get('locationId');
    const scanProcessedRef = useRef(false);

    const loadUserProgress = useCallback(async () => {
        try {
            const progress = await api.getUserProgress(userUuid);
            setScannedLocations(progress.scannedLocations || []);
            setTotalCoins(progress.totalCoins || 0);
        } catch (error) {
            console.error('Error loading progress:', error);
        } finally {
            setLoading(false);
        }
    }, [userUuid]);

    // --- –ü–†–û–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê ---
    // –¢–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–≥–∞ –æ–±—Ä–∞–±–æ—Ç–≤–∞ –≤—Å–∏—á–∫–æ - –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –¥–æ –∏–∑–≤–∏–∫–≤–∞–Ω–µ—Ç–æ –Ω–∞ API
    const processScan = useCallback(async (qrData) => {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–æ–¥—ä—Ç –≤–µ—á–µ –µ —Å–∫–∞–Ω–∏—Ä–∞–Ω
        if (scannedLocations.some(loc => loc.locationId === qrData.locationId)) {
            setScanResultView({
                success: false,
                message: '–í–µ—á–µ —Å—Ç–µ —Å–∫–∞–Ω–∏—Ä–∞–ª–∏ —Ç–æ–∑–∏ QR –∫–æ–¥.',
                additionalInfo: '–ú–æ–ª—è, –Ω–∞–º–µ—Ä–µ—Ç–µ —Å–ª–µ–¥–≤–∞—â–∏—è –∫–æ–¥, –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ.'
            });
            return;
        }

        try {
            const result = await api.scanQR(userUuid, qrData);

            if (result.success) {
                setScannedLocations(result.scannedLocations);
                setTotalCoins(result.totalCoins);

                // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
                const count = result.scannedLocations.length;
                const countTextMap = { 1: '–ø—ä—Ä–≤–∏—è', 2: '–≤—Ç–æ—Ä–∏—è', 3: '—Ç—Ä–µ—Ç–∏—è' };
                const message = `–í–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞–Ω–∏—Ä–∞—Ö—Ç–µ ${countTextMap[count] || count + '-—Ç–∏—è'} QR –∫–æ–¥.`;
                
                // –ó–ê–ú–ï–ù–ï–¢–ï –¢–û–í–ê –° –í–ê–®–ê–¢–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø
                const additionalInfo = `–¢–æ–≤–∞ –µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ ${qrData.company}, –∫–æ—è—Ç–æ —Å–µ –ø–æ–∫–∞–∑–≤–∞ —Å–ª–µ–¥ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ. –ë–æ–Ω—É—Å: +${qrData.bonus} –∫—Ä–µ–¥–∏—Ç–∞.`;

                // –ü–æ–∫–∞–∑–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
                setScanResultView({ success: true, message, additionalInfo });
                
                if (result.isGameComplete) {
                    setTimeout(() => setShowRewardModal(true), 1500);
                }
            } else {
                 setScanResultView({ success: false, message: result.message || '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞.' });
            }
        } catch (error) {
            setScanResultView({ success: false, message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.' });
        }
    }, [userUuid, scannedLocations]);

    // --- –ü–†–û–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê ---
    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ —Å–µ –∏–∑–≤–∏–∫–≤–∞ –æ—Ç –±—É—Ç–æ–Ω–∞ "–í–∏–∂ –º–æ—è –ø—Ä–æ–≥—Ä–µ—Å"
    const handleContinueToGame = () => {
        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ URL –ø–∞—Ä–∞–º–µ—Ç—ä—Ä–∞, –∑–∞ –¥–∞ –Ω–µ —Å–µ –∑–∞–¥–µ–π—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ—Ç–æ –æ—Ç–Ω–æ–≤–æ –ø—Ä–∏ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ
        setSearchParams({}, { replace: true });
        // –°–∫—Ä–∏–≤–∞–º–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—è –µ–∫—Ä–∞–Ω –Ω–∞ –∏–≥—Ä–∞—Ç–∞
        setScanResultView(null);
    };

    const handleRewardChoice = async (choice) => {
        // ... (–±–µ–∑ –ø—Ä–æ–º–µ–Ω–∏ —Ç—É–∫)
        try {
            await api.claimReward(userUuid, choice);
            if (choice === 'coins') {
                setTotalCoins(prev => prev + 50);
            } else {
                setWheelSpins(5);
            }
            setShowRewardModal(false);
        } catch (error) {
            console.error('Error claiming reward:', error);
            if (choice === 'coins') setTotalCoins(prev => prev + 50);
            else setWheelSpins(5);
            setShowRewardModal(false);
        }
    };

    const handleWheelSpin = (result) => {
        // ... (–±–µ–∑ –ø—Ä–æ–º–µ–Ω–∏ —Ç—É–∫)
        setWheelSpins(prev => prev - 1);
        const newTotal = totalCoins + result;
        setTotalCoins(newTotal);
    };

    // –î–µ–º–æ –¥–∞–Ω–Ω–∏ (–±–µ–∑ –ø—Ä–æ–º–µ–Ω–∏)
    const demoQRData = {
        1: { locationId: 1, company: "Tech Solutions Ltd", address: "–±—É–ª. –í–∏—Ç–æ—à–∞ 123, –°–æ—Ñ–∏—è", description: "–í–æ–¥–µ—â–∞ IT –∫–æ–º–ø–∞–Ω–∏—è.", website: "https://techsolutions.bg", bonus: 10 },
        2: { locationId: 2, company: "Green Energy Co", address: "—É–ª. –†–∞–∫–æ–≤—Å–∫–∏ 45, –ü–ª–æ–≤–¥–∏–≤", description: "–ò–Ω–æ–≤–∞—Ç–∏–≤–Ω–∏ —Ä–µ—à–µ–Ω–∏—è.", website: "https://greenenergy.bg", bonus: 15 },
        3: { locationId: 3, company: "Digital Marketing Hub", address: "–ø–ª. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç 1, –í–∞—Ä–Ω–∞", description: "–ö—Ä–µ–∞—Ç–∏–≤–Ω–∏ –∫–∞–º–ø–∞–Ω–∏–∏.", website: "https://digitalmarketing.bg", bonus: 20 }
    };

    useEffect(() => {
        loadUserProgress();
    }, []); // –ò–∑–≤–∏–∫–≤–∞ —Å–µ —Å–∞–º–æ –≤–µ–¥–Ω—ä–∂ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ

    useEffect(() => {
        // --- –ü–†–û–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê ---
        // –¢–æ–∑–∏ useEffect —Å–µ–≥–∞ —Å–µ –∑–∞–¥–µ–π—Å—Ç–≤–∞ —Å–∞–º–æ –∞–∫–æ –∏–º–∞ locationId –∏ –ø—Ä–æ–≥—Ä–µ—Å—ä—Ç –µ –∑–∞—Ä–µ–¥–µ–Ω
        if (!loading && locationIdFromUrl && !scanProcessedRef.current) {
            const qrData = demoQRData[locationIdFromUrl];
            if (qrData) {
                scanProcessedRef.current = true; // –ú–∞—Ä–∫–∏—Ä–∞–º–µ, —á–µ —Å–º–µ –æ–±—Ä–∞–±–æ—Ç–∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ—Ç–æ
                processScan(qrData);
            }
        }
    }, [loading, locationIdFromUrl, processScan]);


    if (loading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
                <div className="text-center">
                    <RotateCcw className="w-8 h-8 animate-spin text-blue-600 mx-auto mb-2" />
                    <p className="text-gray-600">–ó–∞—Ä–µ–∂–¥–∞ —Å–µ...</p>
                </div>
            </div>
        );
    }
    
    // --- –ü–†–û–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê ---
    // –£—Å–ª–æ–≤–Ω–æ —Ä–µ–Ω–¥–∏—Ä–∞–Ω–µ: –∞–∫–æ –∏–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ, –ø–æ–∫–∞–∑–≤–∞–º–µ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ - –∏–≥—Ä–∞—Ç–∞
    if (scanResultView) {
        return <ScanResultPage result={scanResultView} onContinue={handleContinueToGame} />;
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-8 px-4">
            <div className="max-w-md mx-auto">
                <h1 className="text-3xl font-bold text-center text-gray-800 mb-8">
                    üéØ QR –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
                </h1>
                <ProgressTracker
                    scannedLocations={scannedLocations}
                    totalCoins={totalCoins}
                />
                {scannedLocations.length < 3 && (
                    <div className="bg-white rounded-lg shadow-lg p-6 mb-6 text-center">
                        <p className="text-gray-600">
                            –ú–æ–ª—è, —Å–∫–∞–Ω–∏—Ä–∞–π—Ç–µ —Å–ª–µ–¥–≤–∞—â–∏—è QR –∫–æ–¥ —Å –∫–∞–º–µ—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∏, –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ—Ç–æ.
                        </p>
                    </div>
                )}
                <WheelSpinner
                    spins={wheelSpins}
                    onSpin={handleWheelSpin}
                />
                <RewardModal
                    isOpen={showRewardModal}
                    onClose={() => setShowRewardModal(false)}
                    onChoose={handleRewardChoice}
                />
                <div className="mt-8 p-4 bg-white bg-opacity-50 rounded-lg text-sm">
                    <p className="font-mono text-center text-gray-600">
                        UUID: {userUuid.substring(0, 12)}...
                    </p>
                </div>
            </div>
        </div>
    );
}

// Wrap the App component with Router to enable useSearchParams
export default function WrappedApp() {
    return (
        <Router>
            <App />
        </Router>
    );
}